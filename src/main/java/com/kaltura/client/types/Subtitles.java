// ===================================================================================================
//                           _  __     _ _
//                          | |/ /__ _| | |_ _  _ _ _ __ _
//                          | ' </ _` | |  _| || | '_/ _` |
//                          |_|\_\__,_|_|\__|\_,_|_| \__,_|
//
// This file is part of the Kaltura Collaborative Media Suite which allows users
// to do with audio, video, and animation what Wiki platforms allow them to do with
// text.
//
// Copyright (C) 2006-2023  Kaltura Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
// @ignore
// ===================================================================================================
package com.kaltura.client.types;

import com.google.gson.JsonObject;
import com.kaltura.client.Params;
import com.kaltura.client.enums.SubtitlesType;
import com.kaltura.client.types.ObjectBase;
import com.kaltura.client.utils.GsonParser;
import com.kaltura.client.utils.request.MultiRequestBuilder;

/**
 * This class was generated using exec.php
 * against an XML schema provided by Kaltura.
 * 
 * MANUAL CHANGES TO THIS CLASS WILL BE OVERWRITTEN.
 */

/**
 * A class representing the properties of an uploaded subtitles file.
 */
@SuppressWarnings("serial")
@MultiRequestBuilder.Tokenizer(Subtitles.Tokenizer.class)
public class Subtitles extends ObjectBase {
	
	public interface Tokenizer extends ObjectBase.Tokenizer {
		String id();
		String createDate();
		String fileName();
		String subtitlesType();
		String subtitlesLanguage();
	}

	/**
	 * read only Long. An ID generated by the subtitles micro-service for the uploaded
	  file.
	 */
	private Long id;
	/**
	 * An Integer type representing the EPOCH time in seconds that the file was
	  uploaded.
	 */
	private Long createDate;
	/**
	 * a String type listing the file name that was uploaded.
	 */
	private String fileName;
	/**
	 * can be either Processing/Success/Failed, per the last status updated by the
	  aiMetadataGenerator micro-service.
	 */
	private SubtitlesType subtitlesType;
	/**
	 * Mandatory. The language in which the subtitles are written.              It is
	  used in the LLM prompt to inform it what is the language it needs to analyze
	  which will also              be the language in which it generates the metadata
	  values              (note that the metadata keys are always in English). It
	  includes a KalturaLanguage systemName.
	 */
	private String subtitlesLanguage;

	// id:
	public Long getId(){
		return this.id;
	}
	// createDate:
	public Long getCreateDate(){
		return this.createDate;
	}
	// fileName:
	public String getFileName(){
		return this.fileName;
	}
	public void setFileName(String fileName){
		this.fileName = fileName;
	}

	public void fileName(String multirequestToken){
		setToken("fileName", multirequestToken);
	}

	// subtitlesType:
	public SubtitlesType getSubtitlesType(){
		return this.subtitlesType;
	}
	public void setSubtitlesType(SubtitlesType subtitlesType){
		this.subtitlesType = subtitlesType;
	}

	public void subtitlesType(String multirequestToken){
		setToken("subtitlesType", multirequestToken);
	}

	// subtitlesLanguage:
	public String getSubtitlesLanguage(){
		return this.subtitlesLanguage;
	}

	public Subtitles() {
		super();
	}

	public Subtitles(JsonObject jsonObject) throws APIException {
		super(jsonObject);

		if(jsonObject == null) return;

		// set members values:
		id = GsonParser.parseLong(jsonObject.get("id"));
		createDate = GsonParser.parseLong(jsonObject.get("createDate"));
		fileName = GsonParser.parseString(jsonObject.get("fileName"));
		subtitlesType = SubtitlesType.get(GsonParser.parseString(jsonObject.get("subtitlesType")));
		subtitlesLanguage = GsonParser.parseString(jsonObject.get("subtitlesLanguage"));

	}

	public Params toParams() {
		Params kparams = super.toParams();
		kparams.add("objectType", "KalturaSubtitles");
		kparams.add("fileName", this.fileName);
		kparams.add("subtitlesType", this.subtitlesType);
		return kparams;
	}

}

